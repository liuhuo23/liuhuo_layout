// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.1
// source: internal/conf/config.proto

package config

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Environment   string                 `protobuf:"bytes,3,opt,name=environment,proto3" json:"environment,omitempty"`
	Port          int32                  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	Database      *DatabaseConfig        `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	Redis         *RedisConfig           `protobuf:"bytes,6,opt,name=redis,proto3" json:"redis,omitempty"`
	LogLevel      string                 `protobuf:"bytes,7,opt,name=log_level,json=logLevel,proto3" json:"log_level,omitempty"`
	Host          string                 `protobuf:"bytes,8,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppConfig) Reset() {
	*x = AppConfig{}
	mi := &file_internal_conf_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppConfig) ProtoMessage() {}

func (x *AppConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppConfig.ProtoReflect.Descriptor instead.
func (*AppConfig) Descriptor() ([]byte, []int) {
	return file_internal_conf_config_proto_rawDescGZIP(), []int{0}
}

func (x *AppConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AppConfig) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *AppConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AppConfig) GetDatabase() *DatabaseConfig {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *AppConfig) GetRedis() *RedisConfig {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *AppConfig) GetLogLevel() string {
	if x != nil {
		return x.LogLevel
	}
	return ""
}

func (x *AppConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type DatabaseConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Driver        string                 `protobuf:"bytes,1,opt,name=driver,proto3" json:"driver,omitempty"`
	Host          string                 `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Username      string                 `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password      string                 `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	DbName        string                 `protobuf:"bytes,6,opt,name=db_name,json=dbName,proto3" json:"db_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfig) Reset() {
	*x = DatabaseConfig{}
	mi := &file_internal_conf_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfig) ProtoMessage() {}

func (x *DatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfig.ProtoReflect.Descriptor instead.
func (*DatabaseConfig) Descriptor() ([]byte, []int) {
	return file_internal_conf_config_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseConfig) GetDriver() string {
	if x != nil {
		return x.Driver
	}
	return ""
}

func (x *DatabaseConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabaseConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DatabaseConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DatabaseConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DatabaseConfig) GetDbName() string {
	if x != nil {
		return x.DbName
	}
	return ""
}

type RedisConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Host          string                 `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Password      string                 `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RedisConfig) Reset() {
	*x = RedisConfig{}
	mi := &file_internal_conf_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RedisConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisConfig) ProtoMessage() {}

func (x *RedisConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_conf_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisConfig.ProtoReflect.Descriptor instead.
func (*RedisConfig) Descriptor() ([]byte, []int) {
	return file_internal_conf_config_proto_rawDescGZIP(), []int{2}
}

func (x *RedisConfig) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RedisConfig) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RedisConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_internal_conf_config_proto protoreflect.FileDescriptor

const file_internal_conf_config_proto_rawDesc = "" +
	"\n" +
	"\x1ainternal/conf/config.proto\x12\x06config\"\xff\x01\n" +
	"\tAppConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\x12 \n" +
	"\venvironment\x18\x03 \x01(\tR\venvironment\x12\x12\n" +
	"\x04port\x18\x04 \x01(\x05R\x04port\x122\n" +
	"\bdatabase\x18\x05 \x01(\v2\x16.config.DatabaseConfigR\bdatabase\x12)\n" +
	"\x05redis\x18\x06 \x01(\v2\x13.config.RedisConfigR\x05redis\x12\x1b\n" +
	"\tlog_level\x18\a \x01(\tR\blogLevel\x12\x12\n" +
	"\x04host\x18\b \x01(\tR\x04host\"\xa1\x01\n" +
	"\x0eDatabaseConfig\x12\x16\n" +
	"\x06driver\x18\x01 \x01(\tR\x06driver\x12\x12\n" +
	"\x04host\x18\x02 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12\x1a\n" +
	"\busername\x18\x04 \x01(\tR\busername\x12\x1a\n" +
	"\bpassword\x18\x05 \x01(\tR\bpassword\x12\x17\n" +
	"\adb_name\x18\x06 \x01(\tR\x06dbName\"Q\n" +
	"\vRedisConfig\x12\x12\n" +
	"\x04host\x18\x01 \x01(\tR\x04host\x12\x12\n" +
	"\x04port\x18\x02 \x01(\x05R\x04port\x12\x1a\n" +
	"\bpassword\x18\x03 \x01(\tR\bpasswordB\x0eZ\fliuos/configb\x06proto3"

var (
	file_internal_conf_config_proto_rawDescOnce sync.Once
	file_internal_conf_config_proto_rawDescData []byte
)

func file_internal_conf_config_proto_rawDescGZIP() []byte {
	file_internal_conf_config_proto_rawDescOnce.Do(func() {
		file_internal_conf_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_conf_config_proto_rawDesc), len(file_internal_conf_config_proto_rawDesc)))
	})
	return file_internal_conf_config_proto_rawDescData
}

var file_internal_conf_config_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_internal_conf_config_proto_goTypes = []any{
	(*AppConfig)(nil),      // 0: config.AppConfig
	(*DatabaseConfig)(nil), // 1: config.DatabaseConfig
	(*RedisConfig)(nil),    // 2: config.RedisConfig
}
var file_internal_conf_config_proto_depIdxs = []int32{
	1, // 0: config.AppConfig.database:type_name -> config.DatabaseConfig
	2, // 1: config.AppConfig.redis:type_name -> config.RedisConfig
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_internal_conf_config_proto_init() }
func file_internal_conf_config_proto_init() {
	if File_internal_conf_config_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_conf_config_proto_rawDesc), len(file_internal_conf_config_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_conf_config_proto_goTypes,
		DependencyIndexes: file_internal_conf_config_proto_depIdxs,
		MessageInfos:      file_internal_conf_config_proto_msgTypes,
	}.Build()
	File_internal_conf_config_proto = out.File
	file_internal_conf_config_proto_goTypes = nil
	file_internal_conf_config_proto_depIdxs = nil
}
